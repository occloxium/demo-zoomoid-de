// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: demoman/v1/picasso.proto

package flowv3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PicassoServiceClient is the client API for PicassoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PicassoServiceClient interface {
	Palette(ctx context.Context, in *PaletteRequest, opts ...grpc.CallOption) (*PaletteResponse, error)
	Color(ctx context.Context, in *ColorRequest, opts ...grpc.CallOption) (*ColorResponse, error)
}

type picassoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPicassoServiceClient(cc grpc.ClientConnInterface) PicassoServiceClient {
	return &picassoServiceClient{cc}
}

func (c *picassoServiceClient) Palette(ctx context.Context, in *PaletteRequest, opts ...grpc.CallOption) (*PaletteResponse, error) {
	out := new(PaletteResponse)
	err := c.cc.Invoke(ctx, "/demoman.v1.PicassoService/Palette", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picassoServiceClient) Color(ctx context.Context, in *ColorRequest, opts ...grpc.CallOption) (*ColorResponse, error) {
	out := new(ColorResponse)
	err := c.cc.Invoke(ctx, "/demoman.v1.PicassoService/Color", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PicassoServiceServer is the server API for PicassoService service.
// All implementations should embed UnimplementedPicassoServiceServer
// for forward compatibility
type PicassoServiceServer interface {
	Palette(context.Context, *PaletteRequest) (*PaletteResponse, error)
	Color(context.Context, *ColorRequest) (*ColorResponse, error)
}

// UnimplementedPicassoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPicassoServiceServer struct {
}

func (UnimplementedPicassoServiceServer) Palette(context.Context, *PaletteRequest) (*PaletteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Palette not implemented")
}
func (UnimplementedPicassoServiceServer) Color(context.Context, *ColorRequest) (*ColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Color not implemented")
}

// UnsafePicassoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PicassoServiceServer will
// result in compilation errors.
type UnsafePicassoServiceServer interface {
	mustEmbedUnimplementedPicassoServiceServer()
}

func RegisterPicassoServiceServer(s grpc.ServiceRegistrar, srv PicassoServiceServer) {
	s.RegisterService(&PicassoService_ServiceDesc, srv)
}

func _PicassoService_Palette_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaletteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicassoServiceServer).Palette(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoman.v1.PicassoService/Palette",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicassoServiceServer).Palette(ctx, req.(*PaletteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PicassoService_Color_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicassoServiceServer).Color(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoman.v1.PicassoService/Color",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicassoServiceServer).Color(ctx, req.(*ColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PicassoService_ServiceDesc is the grpc.ServiceDesc for PicassoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PicassoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demoman.v1.PicassoService",
	HandlerType: (*PicassoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Palette",
			Handler:    _PicassoService_Palette_Handler,
		},
		{
			MethodName: "Color",
			Handler:    _PicassoService_Color_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demoman/v1/picasso.proto",
}
